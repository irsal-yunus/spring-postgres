variables:
  GIT_CLONE_PATH: $CI_BUILDS_DIR
  GIT_SUBMODULE_STRATEGY: recursive

before_script:
  - git submodule sync --recursive
  - git submodule update --init --recursive
  - export GRADLE_USER_HOME=`pwd`/.gradle

cache:
  paths:
    - .gradle/wrapper
    - .gradle/caches

stages:
    - build
    - test  
    - archive
    - deploy     

build:
    stage: build
    environment:
        name: development
        url: http://188.166.214.118:9090
    tags:
        - s1
    artifacts: 
      public: true
      when: on_success     
      paths:
        - build/libs/*.jar
    before_script:   
        - pwd && cd $CI_BUILDS_DIR        

    rules:
      - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH'
      - if: '$CI_COMMIT_BRANCH == "master"'
        when: on_success          
        allow_failure: true
      - if: '$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^src/ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"'
        when: always
      - if: '$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^src/'
        when: manual
        allow_failure: true
      - if: '$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME'      
      - if: '$CI_COMMIT_TAG != ""'       

    script: 
        - pwd && cd $CI_BUILDS_DIR   
        # - "curl -X POST -F token=94d3a5894201ff60c047c296cad592 -F ref=master https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline"  
        - ./gradlew clean build # build package java
        - ./gradlew copy # running copy task configuration    

    retry:
      max: 2
      when: always
    allow_failure: true        
    after_script:                 
        - echo "Build development complete"    

test:
    stage: test
    environment:
        name: development
        url: http://188.166.214.118:9090
    tags:
        - s1
    script:
        - echo "Skipping..." #./gradlew check       

    only:
        - master        

    allow_failure: true

    retry:
      max: 2
      when: 
       - runner_system_failure
       - stuck_or_timeout_failure
    allow_failure: true
    when: delayed
    start_in: 1 minutes
    after_script:
        - echo "Test development complete..."

archive:
    stage: archive
    environment:
        name: development
        url: http://188.166.214.118:9090
    tags:
        - s1    
    before_script:
        - echo "Skipping..."   
        - ls -ltr $DIR_RELEASE          
      
    script:
        - | 
          if [ -d $DIR_RELEASE ]; then 
            echo "Directory Is exists."; 
          else 
            mkdir -p $DIR_RELEASE/agregate_service;
            echo "Create Directory Success...";
          fi
        - | 
          if [ -f "*.zip" ]; then 
            echo "This package already downloaded..."; 
            unzip *.zip -d $DIR_RELEASE/agregate_service/; 
          else 
            echo "Preparing Archive package...";
            cd $CI_BUILDS_DIR && pwd               
            curl -L --progress-bar --header "PRIVATE-TOKEN: 9SRJZxic2k7ex57649sp" "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/jobs/artifacts/master/download?job=build" -o $DIR_RELEASE/agregate_service/artifacts.zip 2>&1;
            chmod -Rv 775 $DIR_RELEASE/agregate_service/artifacts.zip 
            echo "Archiving Package success...!";
          fi   
    only:
        - master         

    retry:
      max: 2
      when: always         
    allow_failure: true
    when: delayed
    start_in: 1 minutes
    after_script:
        - echo "Archive development complete..."

deploy:
    stage: deploy
    environment:
        name: development
        url: http://188.166.214.118:9090
    tags:
        - s1
    before_script:
        - echo "create Dir backup java"
        - |
          if [ -d /backup/agregate_service ]; then 
            echo "Directory Is exists."; 
          else 
            mkdir -p /backup/agregate_service;
            echo "Create Directory backup Success...";
          fi
        - echo "create Dir App java"
        - |
          if [ -d $DIR_APP ]; then 
            echo "Directory Is exists."; 
          else 
            mkdir -p $DIR_APP;
            echo "Create Directory Success...";
          fi
        - | 
          if [ -e "app_`date +%y_%m_%d`.tar.gz" ]; then 
            echo "Yes, file exists"; 
          else 
            echo "Compres Proses..."; 
            if [[ ! -d "app" ]]
            then
                echo "Directory Not Found on your filesystem."
            else
                tar -cf /backup/agregate_service/app`date +%y_%m_%d`.tar.gz app 
                echo "compres success...";
            fi             
          fi                
 
    script: 
        - cd $DIR_RELEASE/agregate_service && pwd
        - echo "Extract Package...."
        - |
          if unzip *.zip 2>/dev/null; then
            echo 'All is good, archive extracted' >&2;
          else
            echo 'Archive failed to extract' >&2;
            rm -rf $DIR_RELEASE/agregate_service/artifacts.zip;
            cd $CI_BUILDS_DIR && pwd;
            zip -r artifacts.zip build/libs && mv artifacts.zip $DIR_RELEASE/agregate_service/;
          echo "Archiving Package success...!";
          fi 
        - unzip artifacts.zip && ls -ltr libs      
        - echo "Preparing remove packages java..."
        - rm -rf app 
        - ls -ltr app 
        - echo "Remove Package Success..."
        - mv build/libs /home/appuser01/app 
        - echo "Clean Up Package..."
        - rm -rf *
        - echo "Make Sure Privileges user.."
        - ls -ltr /home/appuser01/app
        - chown -R appuser01:appuser01 /home/appuser01/app && chmod -R 755 /home/appuser01/app
        - echo "Preparing restart service java..."
        - su appuser01 && cd /home/appuser01/app # && systemctl status agregate.service
        # - systemctl restart agregate.service && systemctl status agregate.service
        - echo "deploy Success.."
        - echo "clean up package after deploy..."
        - sudo ls -ltr $DIR_RELEASE/agregate_service/
        - sudo rm -rf $DIR_RELEASE/agregate_service/* && sudo ls -ltr $DIR_RELEASE/agregate_service/
        - echo "processing clean up success..."

    only:
        - master        

    retry:
      max: 2
      when: always      

    allow_failure: true
    when: delayed
    start_in: 1 minutes
    after_script:
        - echo "Deploy development complete..."

    



    


