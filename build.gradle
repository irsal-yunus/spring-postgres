buildscript {
	ext {
		springBootVersion = '2.1.1.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

def jarBaseName= 'spring-postgres'
def jarVersion = '0.0.1'
def distributionFolder = 'spring-postgres'
def configFiles = [
	'application.properties','spring-postgres.sh','spring-postgres.service','logback.xml'] as Set

bootJar {
	baseName = jarBaseName
    // version = jarVersion
    exclude 'spring-postgres.sh'
}

task copyFilesToPackage(type: Copy) {
    from('src/main/resources') {
        include configFiles
    }
    from 'build/libs/'+jarBaseName+'.jar'
    into 'build/'+distributionFolder
}

task zipPackage(type: Zip, dependsOn: 'copyFilesToPackage') {
    from 'build/'+distributionFolder
    baseName distributionFolder
}

task runJar(dependsOn:jar) << {
  javaexec { 
    main="-jar";
    args = [
            "E:/project-git/java/springboot-postgresql/build/libs/spring-postgres.jar",
            "-c"            
           ]
  } 
}

build.dependsOn zipPackage
zipPackage.mustRunAfter check

configurations.all {
    resolutionStrategy {
        failOnVersionConflict()
    }
}



group = 'com.example'
// version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}


dependencies {
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('org.postgresql:postgresql')	
	// Logging dependencies
	implementation('org.springframework.boot:spring-boot-starter-log4j2')
	compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'ch.qos.logback:logback-core:1.2.3'
    compile 'org.slf4j:slf4j-api:1.7.25'
  // end logging dependencies
	testImplementation('org.springframework.boot:spring-boot-starter-test')
}
